#!/bin/bash
# SPDX-License-Identifier: MIT
# Copyright (c) 2020 Michael Straube

#
# Description: Show AUR updates in the style of checkupdates
# Dependencies: pacman curl jq
#

get_query_urls() {
	local url
	local rpc="https://aur.archlinux.org/rpc.php?v=5&type=info"
	local split=150 # do not exceed max query url size
	local i=0

	for pkg in "${foreign_packages[@]}"; do
		if ((i == 0)); then
			printf -v url "${rpc}&arg[]=${pkg}"
		elif ((i % split == 0)); then
			printf -v url "${url}\n${rpc}&arg[]=${pkg}"
		else
			printf -v url "${url}&arg[]=${pkg}"
		fi
		i=$((i + 1))
	done
	printf "%s\n" "${url}"
}

get_aur_packages() {
	local query_urls

	mapfile -t query_urls < <(get_query_urls)

	for url in "${query_urls[@]}"; do
		json="$(curl -qs --globoff "${url}")"
		mapfile -t -O "${#aur_packages[@]}"  aur_packages < <(jq -r '.results[] | .Name + " " + .Version' <<< "${json}")
	done
}

if ! type -p jq >/dev/null; then
	printf "jq binary not found\n"
	exit 1
fi

mapfile -t foreign_packages < <(pacman -Qmq)
get_aur_packages

# Now we have array 'aur_packages' with all installed packages from AUR
# that looks like this: ('name version' 'name version' ...)

for pkg in "${aur_packages[@]}"; do
	aur_version="${pkg/* }"
	pkgname="${pkg/ *}"

	mapfile -t pkg_info < <(pacman -Qi "${pkgname}")
	local_version="${pkg_info[1]/*: }"

	ret="$(vercmp "${local_version}" "${aur_version}")"
	((ret < 0)) && printf "aur/%s %s -> %s\n" "${pkgname}" "${local_version}" "${aur_version}"
done
